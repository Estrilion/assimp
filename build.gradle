import static org.gradle.internal.os.OperatingSystem.*

plugins {
    id 'maven'
    id 'java'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
    id "com.github.johnrengelman.shadow" version '4.0.3'
}

// jitpack
group = 'com.github.kotlin-graphics'

ext {
    moduleName = 'com.github.kotlin_graphics.gli'
    kotlin = 'org.jetbrains.kotlin:kotlin'
    kotlin_version = '1.3.11'
    kotlintest_version = '3.1.11'
    uno_version = '24550988e24b8fc99428e599b62f2e81a6f0b334'
    lwjgl_version = "3.2.1"
    lwjgl_natives = current() == WINDOWS ? "windows" : current() == LINUX ? "linux" : "macos"
}

dependencies {

    implementation "$kotlin-stdlib"
    implementation "$kotlin-reflect"

    api "com.github.kotlin-graphics:uno-sdk:$uno_version"

    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version".toString()

    testImplementation 'com.github.kotlin-graphics.glm:glm-test:b48ac556d4'

    implementation 'io.github.microutils:kotlin-logging:1.6.10'

//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

    //implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
	implementation 'org.slf4j:slf4j-api:1.7.25'
    testImplementation 'org.slf4j:slf4j-simple:1.7.25'

    ["", "-glfw", "-jemalloc", "-openal", "-opengl", "-stb"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjgl_version"
        runtime "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
    }

    constraints {
        testImplementation("$kotlin-stdlib:$kotlin_version")
        testImplementation("$kotlin-stdlib-jdk7:$kotlin_version")
        testImplementation("$kotlin-reflect:$kotlin_version")
    }
}

repositories {
    mavenCentral()
    maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl('https://jitpack.io') }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

test.useJUnitPlatform()

artifacts {
    archives sourcesJar
    archives javadocJar
}